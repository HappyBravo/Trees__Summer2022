I have made a new C file named "pract_rb_tree.c" which calls "rbt_functions.c" and access the functions in order to do required operations.

We ask the user to insert a number.
Since there is no tree, we make a new tree. The create tree function is inside the rb_insert() function itself.

Now, that the tree is made, we insert the first data.
Again, we ask the user to input numbers and we built the red-black tree with the data input by the user...

Here, after 10 inputs we print the resultant tree.

After that, we test the remove function; the function to delete a data.

We first check if the data is present in the tree or not with the help of rb_search() function.
If the data is present, we return the address of the node else, we print error message and return the nil node of the tree. "nil" node is like NULL node of the tree, it stores no data and is black in color.

If the data is present in the tree, we remove the node and do the necessary operations to fix the broken rules of the red-black tree if any.
